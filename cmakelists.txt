include(FetchContent)

cmake_minimum_required(VERSION 3.15) 

project(FunVM VERSION 1.0) 

set(CMAKE_CXX_STANDARD 20) 
set(CMAKE_CXX_STANDARD_REQUIRED True)


## SPDLOG ##
FetchContent_Declare(
  spdlog
  GIT_REPOSITORY https://github.com/gabime/spdlog.git
  GIT_TAG        v1.12.0 
)
FetchContent_MakeAvailable(spdlog)

## ByteCode.h ##
add_custom_command(
  OUTPUT ${CMAKE_SOURCE_DIR}/src/ByteCode.h
  COMMAND python ${CMAKE_SOURCE_DIR}/scripts/generate_bytecode_header.py
  DEPENDS ${CMAKE_SOURCE_DIR}/scripts/generate_bytecode_header.py
  DEPENDS ${CMAKE_SOURCE_DIR}/src/bytecode.json
  COMMENT "Generating ByteCode.h"
)

## FVM ##
add_executable(${PROJECT_NAME} 
	src/main.cpp
	src/FVM.cpp
	src/ByteCode.h
	src/lang/Lexer.cpp
	src/lang/Compiler.cpp
	src/lang/Parser.cpp
	)


target_include_directories(${PROJECT_NAME} PUBLIC "${PROJECT_BINARY_DIR}/src")
target_include_directories(${PROJECT_NAME} PUBLIC "${PROJECT_BINARY_DIR}/src/lang")

target_link_libraries(${PROJECT_NAME} PRIVATE spdlog::spdlog $<$<BOOL:${MINGW}>:ws2_32>)

# Compiler specific flags
if (MSVC)
    target_compile_options(${PROJECT_NAME} PRIVATE /W4 /WX)
else()
    target_compile_options(${PROJECT_NAME} PRIVATE -Wall -Wextra -Werror -pedantic)
    if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
        target_compile_options(${PROJECT_NAME} PRIVATE -fsanitize=address)
        set(CMAKE_LINKER_FLAGS_DEBUG "${CMAKE_LINKER_FLAGS_DEBUG} -fsanitize=address")
    endif()
endif()

